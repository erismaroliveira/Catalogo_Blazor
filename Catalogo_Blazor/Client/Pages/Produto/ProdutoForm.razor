<EditForm Model="Produto" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label form="nome">Nome: </label>
        <div>
            <InputText id="txtProdutoNome" @bind-Value="@Produto.Nome" class="form-control" />
            <ValidationMessage For="@(() => Produto.Nome)" />
        </div>
    </div>
    <div class="form-group">
        <label form="descricao">Descrição: </label>
        <div>
            <InputTextArea @bind-Value="Produto.Descricao" class="form-control" />
            <ValidationMessage For="@(() => Produto.Descricao)" />
        </div>
    </div>
    <div class="form-group">
        <label form="preco">Preço: </label>
        <div>
            <InputNumber @bind-Value="Produto.Preco" class="form-control" />
            <ValidationMessage For="@(() => Produto.Preco)" />
        </div>
    </div>
    <div class="form-group">
        <label form="categoria">Categoria: </label>
        <select @onchange="CategoriaSelectionChanged" class="form-control">
            @if(categorias != null)
            {
               @foreach (var categoria in categorias)
               {
                   <option value="@categoria.CategoriaId" selected="@(categoria.CategoriaId == Produto.CategoriaId ? true : false)">
                       @categoria.Nome
                   </option>
               }
            }
        </select>
    </div>
    <div class="form-group">
        <InputFile OnChange="CarregaImagem" />
    </div>
    <div class="col-2">
        <ImagemFoto ImagemRemota="@ImagemRemota" />
    </div>
    <br />
    <button type="submit" class="btn btn-success">
        @ButtonTextSubmit
    </button>
    <button class="btn btn-danger" @onclick="@(() => navigation.NavigateTo("Produto"))">
        @ButtonTextCancelar
    </button>
</EditForm>

@code {
    List<Categoria> categorias;

    [Inject]
    private NavigationManager navigation { get; set; }

    [Inject]
    private HttpClient http { get; set; }

    [Parameter]
    public Produto Produto { get; set; }

    [Parameter]
    public string ButtonTextSubmit { get; set; }

    [Parameter]
    public string ButtonTextCancelar { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public string ImagemRemota { get; set; }

    long maxFileSize = 1024 * 1024 * 15;

    private async Task CarregaImagem(InputFileChangeEventArgs e)
    {
        var format = "image/jpeg";
        var imageFile = await e.File.RequestImageFileAsync(format, 300, 300);

        using var fileStream = imageFile.OpenReadStream(maxFileSize);
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);

        ImagemRemota = $"data:{format};base64, {Convert.ToBase64String(memoryStream.ToArray())}";

        if(ImagemRemota != null)
        {
            Produto.ImagemUrl = ImagemRemota;
            ImagemRemota = null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CarregaCategorias();
    }

    private async Task CarregaCategorias()
    {
        categorias = await http.GetFromJsonAsync<List<Categoria>>("api/Categoria/todas");
    }

    private void CategoriaSelectionChanged(ChangeEventArgs e)
    {
        if(int.TryParse(e.Value.ToString(), out int id))
        {
            Produto.CategoriaId = id;
        }
    }

}
