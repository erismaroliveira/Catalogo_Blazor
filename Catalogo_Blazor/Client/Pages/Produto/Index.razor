@page "/produto"
@using System.Text.Json
@inject HttpClient http
@inject NavigationManager navigation

<h2>Produtos</h2>

<div>
    <a class="btn btn-success" href="produto/create">Criar Produto</a>
</div>
<br />

<div class="form-inline">
    <label class="sr-only" for="filter-name">Filtro</label>
    <input type="text" class="form-control mb-2 mr-sm-2" @bind="nomeFiltro" placeholder="Filtrar pelo nome" />
    <button type="submit" class="btn btn-info mr-sm-2 mb-2" @onclick="Filtrar">
        Filtrar
    </button>
    <button type="submit" class="btn btn-danger mb-2" @onclick="LimparFiltro">
        Limpar
    </button>
</div>
<br />

@if(produtos == null)
{
    <p><em>Carregando...</em></p>
}
else if(produtos.Count == 0)
{
    <p><em>Não existem produtos cadastrados...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Produto</th>
                <th>Descrição</th>
                <th>Preço</th>
                <th>Editar</th>
                <th>Deletar</th>
            </tr>
        </thead>
        <tbody>
           @foreach (var produto in produtos)
           {
               <tr>
                   <td>@produto.Nome</td>
                   <td>@produto.Descricao</td>
                   <td>@produto.Preco</td>
                   <td>
                       <a class="btn btn-info" href="produto/edit/@produto.ProdutoId">Editar</a>
                   </td>
                   <td>
                       <a class="btn btn-danger" @onclick="@(() => DeletarProduto(produto.ProdutoId))">Deletar</a>
                   </td>
               </tr>
           }
        </tbody>
    </table>
}

<Confirma @ref="confirma" onCancela="CancelaConfirma" onConfirma="DeletaConfirma">
    <div>Deseja realmente excluir este item?</div>
</Confirma>

<hr />

<Paginacao QtdTotalPaginas="QtdTotalPaginas" PaginaAtual="PaginaAtual" Raio="2" PaginaSelecionada="PaginaSelecionada" />


@code {
    List<Produto> produtos { get; set; }
    Confirma confirma;
    int codigoProduto;

    private string nomeFiltro = string.Empty;

    private int QtdTotalPaginas;
    private int PaginaAtual = 1;

    protected override async Task OnInitializedAsync()
    {
        await CarregaProdutos();
    }

    public async Task CarregaProdutos(int pagina = 1, int qtdPorPagina = 5)
    {
        var httpResponse = 
            await http.GetAsync($"api/Produto?pagina={pagina}&qtdPorPagina={qtdPorPagina}&nome={nomeFiltro}");

        if (httpResponse.IsSuccessStatusCode)
        {
            QtdTotalPaginas = int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());

            var responseString = await httpResponse.Content.ReadAsStringAsync();

            produtos = JsonSerializer.Deserialize<List<Produto>>(responseString, new JsonSerializerOptions()
            {
                PropertyNameCaseInsensitive = true
            });
        }
    }

    private async Task PaginaSelecionada(int pagina)
    {
        PaginaAtual = pagina;
        await CarregaProdutos(pagina);
    }

    private void DeletarProduto(int produtoId)
    {
        confirma.Exibir();
        codigoProduto = produtoId;
    }

    private void CancelaConfirma()
    {
        confirma.Ocultar();
    }

    private async Task DeletaConfirma()
    {
        await http.DeleteAsync($"api/Produto/{codigoProduto}");
        confirma.Ocultar();
        await CarregaProdutos();
    }

    private async Task Filtrar()
    {
        PaginaAtual = 1;
        await CarregaProdutos();
    }

    private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        PaginaAtual = 1;
        await CarregaProdutos();
    }
}