<nav aria-label="Paginacao">
  <ul class="pagination justify-content-center">
    @foreach (var link in links)
   {
       <li @onclick="@(() => PaginaSelecionadaLink(link))"
           style="cursor: pointer"
           class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
           <span class="page-link" href="#">@link.Text</span>
       </li>
   }
  </ul>
</nav>

@code {
    [Parameter]
    public int PaginaAtual { get; set; } = 1;

    [Parameter]
    public int QtdTotalPaginas { get; set; }

    [Parameter]
    public int Raio { get; set; } = 3;

    [Parameter]
    public EventCallback<int> PaginaSelecionada { get; set; }

    List<LinkModel> links;

    private async Task PaginaSelecionadaLink(LinkModel link)
    {
        if(link.Page == PaginaAtual)
        {
            return;
        }

        if (!link.Enabled)
        {
            return;
        }

        PaginaAtual = link.Page;
        await PaginaSelecionada.InvokeAsync(link.Page);
    }

    class LinkModel
    {
        public LinkModel(int page) : this(page, true)
        {}

        public LinkModel(int page, bool enabled) : this(page, enabled, page.ToString())
        {}

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Text = text;
            Enabled = enabled;
        }

        public int Page { get; set; }
        public string Text { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
    }

    protected override void OnParametersSet()
    {
        CarregaPaginas();
    }

    private void CarregaPaginas()
    {
        links = new List<LinkModel>();

        //trata o link da página anterior
        var isLinkPaginaAnteriorHabilitado = PaginaAtual != 1;
        var paginaAnterior = PaginaAtual - 1;

        links.Add(new LinkModel(paginaAnterior, isLinkPaginaAnteriorHabilitado, "Anterior"));

        //trata os links das páginas especificas
        for (int i = 1; i <= QtdTotalPaginas; i++)
        {
            if(i >= PaginaAtual - Raio && i <= PaginaAtual + Raio)
            {
                links.Add(new LinkModel(i)
                    {
                        Active = PaginaAtual == i
                    });
            }
        }

        //trata o link para próxima página
        var isLinkProximaPaginaHabilitado = PaginaAtual != QtdTotalPaginas;
        var proximaPagina = PaginaAtual + 1;

        links.Add(new LinkModel(proximaPagina, isLinkProximaPaginaHabilitado, "Próximo"));
    }
}
